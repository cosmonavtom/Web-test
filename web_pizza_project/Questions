Q. Что такое паттерн (обычный)? Из чего он состоит? Базовые принципы применения паттернов.
A. Патерн это общепринятое решение для часто встречающейся проблемы. Не даёт конкретных шагов(как алгоритмм),
  а только общее поведение. Состоит из названия, проблемы требующей решения, самого решения этой проблемы, условий,
  в которых паттерн может быть применён или ограничен, и примера(ов) применения.
  Для применения паттерна нужно само понимание проблемы, изучение контекста, что бы убедится, что данный паттерн
  в принципе здесь применим, документации для других разрабов(в том числе и будущего себя) и гибкость паттерна под
  конкретную проблему. Так же использование нескольких паттернов одновременно(композиция)

Q. Перечислите разновидности паттернов и минимум по 3 примера для каждой из них.
A. Есть три больших категории - Порождающие, Структурные и Поведенческие.
    1. Порождающие. Система контролирует создание обхектов и их механику
        Abstract Method, Factory Method, Singleton
    2. Структурные. Система определяет как объекты и классы могут составлять более крупные структуры.
        Adapter, Decorator, Facade
    3. Поведенческие. Паттерны определяют взаимодействие между объектами и классами системы и делятся на уровни
      объектов, классов и взаимодействующих объектов и классов.
        Observer, Strategy, Command

Q. Расшифруйте аббревиатуру SOLID (можно на русском).
A. SOLID — это аббревиатура пяти основных принципов проектирования в объектно‑ориентированном программировании — 
  Single responsibility, Open-closed, Liskov substitution, Interface segregation и Dependency inversion.
  Расшифровка:
    Single responsibility — принцип единственной ответственности
    Open-closed — принцип открытости / закрытости
    Liskov substitution — принцип подстановки Барбары Лисков
    Interface segregation — принцип разделения интерфейса
    Dependency inversion — принцип инверсии зависимостей

Q. Что такое MVC, для чего предназначен каждый элемент (вкратце).
A. MVC расшифровывается как «модель-представление-контроллер» (от англ. model-view-controller). Это способ
  организации кода, который предполагает выделение блоков, отвечающих за решение разных задач. Один блок
  отвечает за данные приложения, другой отвечает за внешний вид, а третий контролирует работу приложения.

Q.Что такое многопоточность? Почему возникла необходимость ее появления. Какой модуль используется в Python
  для работы с потоками?
A. Многопоточность — это способ выполнения нескольких потоков в рамках одного процесса, позволяя программе
  выполнять несколько задач одновременно.
  Причины появления:
  1. Параллелизм: Многопоточность позволяет выполнять несколько операций одновременно, например, обрабатывать
    данные, выполнять сетевые запросы и т.д., что может значительно ускорить общее время выполнения программы.
  2. Ожидание ввода-вывода: В ситуациях, когда приложение ожидает ответ от внешнего ресурса (например, базы данных
    или сети), многопоточность позволяет другим частям приложения продолжать работу, не дожидаясь завершения операции
  3. Ресурсное использование: Благодаря многопоточности можно более эффективно использовать процессор и другие 
    ресурсы системы, особенно при выполнении задач, требующих много времени, таких как обработка файлов или 
    использование сетевых соединений.
  4. Улучшение отзывчивости: В пользовательских интерфейсах многопоточность позволяет избежать зависания интерфейса,
    так как длительные операции могут выполняться в фоновом потоке.
  В Python для управления потоками используется модуль threading.

Q. GIL - что это такое? На каком уровне он работает в Python.
A. GIL (Global Interpreter Lock) — это механизм блокировки в Python, который ограничивает выполнение потоков. Он
    обеспечивает, что только один поток может выполнять байт-код Python в любой данный момент времени, даже если в
    программе есть несколько потоков. 
    Работает на уровне интерпретатора.

Q. Основное отличие HTTP от HTTPS? Из чего состоит HTTP запрос приведите 3 примера методов запроса. Из чего состоит
  HTTP ответ, какие основные типы кодов статуса могут быть получены при ответе.
A. HTTP: Несет данные в нешифрованном виде. Это не обеспечивает безопасности конфиденциальных данных.
  HTTPS: Использует шифрование через SSL/TLS(Secure Socket Layer/Transport Layer Security), что защищает данные при
  передаче между клиентом и сервером.
  HTTP запрос состоит из следующих основных компонентов:
    1. Метод(например, GET, POST, PUT, DELETE).
    2. URL
    3. HTTP версия
    4. Заголовки(дополнительная информация о запросе, например, тип контента, версия браузера и т.д.).
    5. Тело запроса(необязательно, используется, например, для передачи данных в POST-запросах)
  HTTP ответ состоит из следующих компонентов:    
    1. HTTP версия
    2. Код состояния(например, 200, 404, 500)
    3. Сообщение состояния
    4. Заголовки(сопроводительная информация о ответе, например, тип контента, длина ответа и т.д.)
    5. Тело ответа(необязательно, содержит запрашиваемые данные, например, HTML-код)
  Основные типы кодов статуса:
    1. Коды 2xx (Успех):
    - 200 OK: Запрос успешно выполнен.
    - 201 Created: Запрос выполнен, и новый ресурс был создан.
    
    2. Коды 3xx (Перенаправление):
    - 301 Moved Permanently: Ресурс был перемещен на новый URL.
    - 302 Found: Ресурс временно перемещен на другой URL.
    
    3. Коды 4xx (Ошибка клиента):
    - 400 Bad Request: Запрос не может быть обработан, так как он содержит синтаксическую ошибку.
    - 404 Not Found: Запрашиваемый ресурс не найден.
    
    4. Коды 5xx (Ошибка сервера):
    - 500 Internal Server Error: Ошибка на стороне сервера, запрос не был обработан.
    - 503 Service Unavailable: Сервер временно недоступен (например, перегружен).

Q. Перечислите уровни модели OSI.
A.     Прикладной уровень (Application Layer)
    ^  Представительский уровень (Presentation Layer)
    ^  Сеансовый уровень (Session Layer)
    ^  Транспортный уровень (Transport Layer)
    ^  Сетевой уровень (Network Layer)
    ^  Канальный уровень (Data Link Layer)
    ^  Физический уровень (Physical Layer)

Q. Из чего состоит кадр (фрейм) сообщения когда мы его пересылаем по TCP/IP протоколу.
A. У модели протокола TCP/IP 4 уровня: Канальный - Межсетевой - Транспортный- Прикладной
  Фрейм включает в себя следующие компоненты:
    1. Уровень канала передачи данных (Data Link Layer):
      a. Заголовок канального уровня:
      - MAC-адрес назначения (Destination MAC Address): Адрес устройства, к которому направляется кадр.
      - MAC-адрес источника (Source MAC Address): Адрес устройства, отправляющего кадр.
      - Тип/Протокол (EtherType): Указывает, какой протокол обрабатывает данные (например, IPv4 или IPv6).      
      b. Тело (Payload):
      - Данные: Это фактические данные (пакет), которые передаются. В случае TCP/IP это будет пакет, 
      полученный от сетевого уровня.      
      c. Трейлер (Trailer):
      - Контрольная сумма (Frame Check Sequence, FCS): Используется для проверки целостности данных. 
      Она позволяет обнаружить ошибки, возникшие при передаче фрейма.
      
    2. Уровень сетевого (Network Layer):
      a. Заголовок сетевого уровня:
      - Версия: Версия IP (IPv4 или IPv6).
      - Длина заголовка: Длина заголовка IP.
      - Тип сервиса: Используется для указания приоритетов и качества службы.
      - Общая длина: Общая длина пакета (включая заголовок и данные).
      - Идентификация, флаги, смещение: Используются для фрагментации и сборки пакетов.
      - Время жизни (TTL): Ограничивает время жизни пакета в сети.
      - Протокол: Указывает протокол, которому передаются данные (например, TCP, UDP и т.д.).
      - IP-адрес источника: Адрес устройства, отправляющего пакет.
      - IP-адрес назначения: Адрес устройства, которому предназначены данные.
      
      3. Уровень транспортного (Transport Layer):
       a. Заголовок транспортного уровня:
      - Порт источника: Порт на устройстве-отправителе.
      - Порт назначения: Порт на устройстве-назначении.
      - Порядковый номер (для TCP): Номер последовательности данных.
      - Номер подтверждения (для TCP): Номер, который указывает, какие данные были успешно получены.
      - Длина заголовка: Длина заголовка для корректной обработки.
      - Флаги (TCP флаги): Указывают на статус соединения (например, SYN, ACK).
      - Размер окна: Используется для управления потоком.
      - Контрольная сумма: Проверка целостности данных.
      - Указатель срочности: Обозначает срочные данные.
      
      4. Тело (Payload):
      - Данные: Данные передаваемого приложения, упакованные в фрейме.
        
Q. Отличия между TCP/IP и UDP протоколами
A. Основные различия между TCP и UDP:
  1. Надежность
    - TCP: Обеспечивает надежную и гарантированную доставку данных. Использует механизмы управления потоком и
      коррекции ошибок, такие как нумерация последовательностей, подтверждения (ACK), повторная отправка
      потерянных пакетов и контрольная сумма.
    - UDP: Не обеспечивает надежности. Доставленные данные могут потеряться, дублироваться или прибыть в
      неправильном порядке. Протокол не использует подтверждения или повторную отправку данных.
    
  2. Установка соединения
    - TCP: Устанавливает соединение перед передачей данных через трехстороннее рукопожатие (SYN, SYN-ACK, ACK).
      Это позволяет обеим сторонам согласовать параметры связи.
    - UDP: Не устанавливает соединение. Данные отправляются немедленно, без предварительных настроек. Это снижает
      задержку, но увеличивает риск потери данных.
    
  3. Скорость
    - TCP: Учитывает надежность, что может приводить к увеличению задержек из-за дополнительной обработки и
      перепроверки. В результате TCP может быть медленнее, чем UDP для некоторых приложений.
    - UDP: Более быстрый и легковесный, так как не требует подтверждений и дополнительных механизмов контроля.
      Это делает UDP более подходящим для приложений, где скорость критична.
    
  4. Ориентированность на соединение
    - TCP: Ориентированный на соединение, требует, чтобы клиент и сервер установили соединение перед передачей данных.
    - UDP: Без соединения, позволяет отправку пакетов данных без предварительных шагов по установлению соединения.
    
  5. Порядок доставки
    - TCP: Гарантирует порядок доставки пакетов. Данные приходят в том порядке, в котором были отправлены.
    - UDP: Порядок доставки не гарантируется. Пакеты могут приходить в любом порядке, и приложение должно обрабатывать
      это самостоятельно, если это необходимо.
    
  6. Использование ресурсов
    - TCP: Более ресурсозатратный из-за необходимости управления состоянием соединения и обработки
      автоматического контроля.
    - UDP: Меньше нагрузки на ресурсы, так как не требует много затрачиваемых ресурсов для обеспечения надежности.
    
  7. Применение
    - TCP: Чаще используется для приложений, требующих надежной доставки данных, таких как веб-сайты (HTTP/HTTPS),
      электронная почта (SMTP) и файлообменные сервисы (FTP).
    - UDP: Подходит для приложений, где скорость важнее надежности, таких как потоковое видео, VoIP, игры в реальном
      времени и DNS (Domain Name System).

















